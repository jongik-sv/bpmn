const WebSocket = require('ws');
const http = require('http');
const { setupWSConnection } = require('y-websocket/bin/utils');

const PORT = process.env.WS_PORT || 1234;
const HOST = process.env.WS_HOST || 'localhost';

console.log('üöÄ Starting Yjs WebSocket Server...');

// HTTP ÏÑúÎ≤Ñ ÏÉùÏÑ±
const server = http.createServer((request, response) => {
  response.writeHead(200, { 'Content-Type': 'text/plain' });
  response.end('Yjs WebSocket Server running\n');
});

// WebSocket ÏÑúÎ≤Ñ ÏÉùÏÑ±
const wss = new WebSocket.Server({ 
  server,
  perMessageDeflate: {
    // ÏÑ±Îä•ÏùÑ ÏúÑÌïú ÏïïÏ∂ï ÏÑ§Ï†ï
    threshold: 1024,
    concurrencyLimit: 10,
    memLevel: 7
  }
});

// Ïó∞Í≤∞Îêú ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Í¥ÄÎ¶¨
const connections = new Map();
const documents = new Map();

wss.on('connection', (ws, req) => {
  const url = new URL(req.url, `http://${req.headers.host}`);
  const roomName = url.searchParams.get('room') || 'default-room';
  
  console.log(`üì° New client connected to room: ${roomName}`);
  
  // Yjs WebSocket Ïó∞Í≤∞ ÏÑ§Ï†ï
  setupWSConnection(ws, req, {
    docName: roomName,
    gc: true // Í∞ÄÎπÑÏßÄ Ïª¨Î†âÏÖò ÌôúÏÑ±Ìôî
  });
  
  // Ïó∞Í≤∞ Ï†ïÎ≥¥ Ï†ÄÏû•
  const clientInfo = {
    id: generateClientId(),
    room: roomName,
    connectedAt: new Date(),
    ws: ws
  };
  
  connections.set(ws, clientInfo);
  
  // Î∞©Î≥Ñ Î¨∏ÏÑú Í¥ÄÎ¶¨
  if (!documents.has(roomName)) {
    documents.set(roomName, {
      clients: new Set(),
      createdAt: new Date(),
      lastActivity: new Date()
    });
  }
  
  const room = documents.get(roomName);
  room.clients.add(clientInfo.id);
  room.lastActivity = new Date();
  
  console.log(`üë• Room "${roomName}" now has ${room.clients.size} client(s)`);
  
  // Ïó∞Í≤∞ Ìï¥Ï†ú Ï≤òÎ¶¨
  ws.on('close', () => {
    console.log(`üì§ Client disconnected from room: ${roomName}`);
    
    connections.delete(ws);
    
    if (room) {
      room.clients.delete(clientInfo.id);
      
      if (room.clients.size === 0) {
        console.log(`üóëÔ∏è Room "${roomName}" is now empty`);
        // Îπà Î∞©ÏùÄ ÏùºÏ†ï ÏãúÍ∞Ñ ÌõÑ Ï†ïÎ¶¨ (ÏÑ†ÌÉùÏÇ¨Ìï≠)
        setTimeout(() => {
          if (room.clients.size === 0) {
            documents.delete(roomName);
            console.log(`üßπ Cleaned up empty room: ${roomName}`);
          }
        }, 60000); // 1Î∂Ñ ÌõÑ Ï†ïÎ¶¨
      } else {
        console.log(`üë• Room "${roomName}" now has ${room.clients.size} client(s)`);
      }
    }
  });
  
  // ÏóêÎü¨ Ï≤òÎ¶¨
  ws.on('error', (error) => {
    console.error(`‚ùå WebSocket error in room ${roomName}:`, error);
  });
});

// ÏÑúÎ≤Ñ ÏãúÏûë
server.listen(PORT, HOST, () => {
  console.log(`‚úÖ Yjs WebSocket Server is running on ws://${HOST}:${PORT}`);
  console.log(`üåê HTTP health check available at http://${HOST}:${PORT}`);
  console.log(`üìä Server started at ${new Date().toISOString()}`);
});

// Ï†ïÎ¶¨ ÏûëÏóÖÏùÑ ÏúÑÌïú Ï£ºÍ∏∞Ï†Å Ï≤¥ÌÅ¨ (ÏÑ†ÌÉùÏÇ¨Ìï≠)
setInterval(() => {
  const now = new Date();
  const activeRooms = documents.size;
  const totalConnections = connections.size;
  
  console.log(`üìà Server status: ${totalConnections} connections across ${activeRooms} rooms`);
  
  // ÎπÑÌôúÏÑ± Î∞© Ï†ïÎ¶¨ (1ÏãúÍ∞Ñ Ïù¥ÏÉÅ ÌôúÎèô ÏóÜÏùå)
  for (const [roomName, room] of documents.entries()) {
    const inactiveTime = now - room.lastActivity;
    if (inactiveTime > 3600000 && room.clients.size === 0) { // 1ÏãúÍ∞Ñ
      documents.delete(roomName);
      console.log(`üßπ Cleaned up inactive room: ${roomName}`);
    }
  }
}, 300000); // 5Î∂ÑÎßàÎã§ Ï≤¥ÌÅ¨

// Ïö∞ÏïÑÌïú Ï¢ÖÎ£å Ï≤òÎ¶¨
process.on('SIGTERM', () => {
  console.log('üì¥ Received SIGTERM, shutting down gracefully...');
  wss.close(() => {
    process.exit(0);
  });
});

process.on('SIGINT', () => {
  console.log('üì¥ Received SIGINT, shutting down gracefully...');
  wss.close(() => {
    process.exit(0);
  });
});

// ÏóêÎü¨ Ï≤òÎ¶¨
process.on('uncaughtException', (error) => {
  console.error('üí• Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('üí• Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

// Ïú†Ìã∏Î¶¨Ìã∞ Ìï®Ïàò
function generateClientId() {
  return Math.random().toString(36).substr(2, 9);
}

// ÏÑúÎ≤Ñ Ï†ïÎ≥¥ API (ÏÑ†ÌÉùÏÇ¨Ìï≠)
server.on('request', (req, res) => {
  if (req.url === '/status') {
    const status = {
      uptime: process.uptime(),
      connections: connections.size,
      rooms: documents.size,
      memory: process.memoryUsage(),
      timestamp: new Date().toISOString()
    };
    
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify(status, null, 2));
    return;
  }
  
  // Í∏∞Î≥∏ ÏùëÎãµ
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end(`Yjs WebSocket Server
Connected clients: ${connections.size}
Active rooms: ${documents.size}
Uptime: ${Math.floor(process.uptime())}s
Status endpoint: /status
`);
});